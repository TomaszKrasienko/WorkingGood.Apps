// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using working_good.business.infrastructure.DAL;

#nullable disable

namespace working_good.business.infrastructure.DAL.Migrations
{
    [DbContext(typeof(WgDbContext))]
    partial class WgDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("wg")
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("working_good.business.core.Models.Company.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("EmailDomain")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsOwner")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<TimeSpan?>("SlaTimeSpan")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.ToTable("Companies", "wg");
                });

            modelBuilder.Entity("working_good.business.core.Models.Company.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("Employees", "wg");
                });

            modelBuilder.Entity("working_good.business.core.Models.Company.User", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId")
                        .IsUnique()
                        .HasFilter("[EmployeeId] IS NOT NULL");

                    b.ToTable("Users", "wg");
                });

            modelBuilder.Entity("working_good.business.core.Models.Company.Employee", b =>
                {
                    b.HasOne("working_good.business.core.Models.Company.Company", null)
                        .WithMany("Employees")
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("working_good.business.core.Models.Company.User", b =>
                {
                    b.HasOne("working_good.business.core.Models.Company.Employee", null)
                        .WithOne("User")
                        .HasForeignKey("working_good.business.core.Models.Company.User", "EmployeeId");

                    b.OwnsOne("working_good.business.core.ValueObjects.User.FullName", "FullName", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "wg");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("working_good.business.core.ValueObjects.User.ResetPasswordToken", "ResetPasswordToken", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateTime?>("Expiry")
                                .HasColumnType("datetime2")
                                .HasColumnName("ResetTokenExpiry");

                            b1.Property<string>("Token")
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("ResetToken");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "wg");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("working_good.business.core.ValueObjects.User.VerificationToken", "VerificationToken", b1 =>
                        {
                            b1.Property<Guid>("UserId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("Token")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("VerificationToken");

                            b1.Property<DateTime?>("VerificationDate")
                                .HasColumnType("datetime2")
                                .HasColumnName("VerificationTokenDate");

                            b1.HasKey("UserId");

                            b1.ToTable("Users", "wg");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("FullName");

                    b.Navigation("ResetPasswordToken");

                    b.Navigation("VerificationToken");
                });

            modelBuilder.Entity("working_good.business.core.Models.Company.Company", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("working_good.business.core.Models.Company.Employee", b =>
                {
                    b.Navigation("User");
                });
#pragma warning restore 612, 618
        }
    }
}
